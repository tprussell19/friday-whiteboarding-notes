Question #1: Turning Strings to URLs

URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"

// Start Notes

  Clarifying questions:

    Will the input always be a string?

    Will the input string always have at least one space in it?

  Notes:

    non-recursive:

      check if string has any spaces, if not, return string

      else, split string into array

      loop through array to find any spaces

      if an element in the array is a space, set that element equal to "%20"

      when loop is finished, use arr.join("") to turn back into a string

      return string

    recursive:

      base case: if the string no longer includes any spaces, return the string

      recursion: ???

// Start Solutions

  non-recursive:

    function urlify(str) {
      if (!str.includes(" ")) {
        return str;
      } else {
        let arr = str.split("");
        for (i = 0; i < arr.length; i++) {
          if (arr[i] === " ") {
            arr[i] = "%20";
          }
        }
        str = arr.join("");
        return str;
      }
    }

  recursive:

    const urlify = (str) => {
      if (!str.includes(" ")) {
        return str;
      }
      return str.split(" ").join("%20");
    }

